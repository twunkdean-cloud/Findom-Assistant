// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string | undefined;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;

// Built-in fallback credentials (publishable key is safe to embed)
const FALLBACK_URL = 'https://qttmhbtaguiioomcjqbt.supabase.co';
const FALLBACK_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF0dG1oYnRhZ3VpaW9vbWNqcWJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA3MjQ5MDMsImV4cCI6MjA3NjMwMDkwM30.M4AiSRnA0xfmDgmtxYaKr4GT7bvzoFS3ukxpsN3b8K0';

// Resolve config using env or fallback
const RESOLVED_URL = SUPABASE_URL || FALLBACK_URL;
const RESOLVED_KEY = SUPABASE_PUBLISHABLE_KEY || FALLBACK_ANON_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  // eslint-disable-next-line no-console
  console.warn('Supabase env vars missing; using built-in fallback credentials.');
}

// NEW: Export whether we are using fallback credentials (env vars missing)
export const usingFallbackCredentials = !(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);

export const isSupabaseConfigured = Boolean(RESOLVED_URL && RESOLVED_KEY);

function createMissingEnvStub(): SupabaseClient {
  const message = 'Supabase is not configured. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your environment.';
  const notConfiguredResponse = Promise.resolve({ data: null, error: { message } } as any);

  const chain: any = {
    select: () => chain,
    upsert: () => notConfiguredResponse,
    insert: () => notConfiguredResponse,
    update: () => notConfiguredResponse,
    delete: () => notConfiguredResponse,
    eq: () => chain,
    single: () => notConfiguredResponse,
    order: () => chain,
    limit: () => chain,
  };

  const stub: any = {
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: { message } } as any),
      signInWithPassword: () => notConfiguredResponse,
      signUp: () => notConfiguredResponse,
      signOut: () => Promise.resolve({ error: { message } } as any),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } }, error: null } as any),
    },
    from: () => chain,
    functions: {
      invoke: () => notConfiguredResponse,
    },
    storage: {
      from: () => ({
        upload: () => notConfiguredResponse,
        download: () => notConfiguredResponse,
        list: () => notConfiguredResponse,
      }),
    },
  };

  return stub as SupabaseClient;
}

export const supabase: SupabaseClient =
  isSupabaseConfigured
    ? createClient(RESOLVED_URL, RESOLVED_KEY)
    : createMissingEnvStub();