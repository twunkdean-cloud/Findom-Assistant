// This file is automatically generated. Do not edit it directly.
import { createClient, type SupabaseClient } from '@supabase/supabase-js';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string | undefined;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;

// Security: No hardcoded credentials allowed. All credentials must be provided via environment variables.
// For local development, set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your .env file
const RESOLVED_URL = SUPABASE_URL;
const RESOLVED_KEY = SUPABASE_PUBLISHABLE_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  if (import.meta.env.DEV) {
    // eslint-disable-next-line no-console
    console.warn('Supabase env vars missing. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your .env file.');
  } else {
    // eslint-disable-next-line no-console
    console.error('Supabase env vars missing in production; Supabase will be disabled.');
  }
}

// Export whether credentials are properly configured
export const usingFallbackCredentials = !(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);

export const isSupabaseConfigured = Boolean(RESOLVED_URL && RESOLVED_KEY);

function createMissingEnvStub(): SupabaseClient {
  const message = 'Supabase is not configured. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in your environment.';
  const notConfiguredResponse = Promise.resolve({ data: null, error: { message } } as any);

  const chain: any = {
    select: () => chain,
    upsert: () => notConfiguredResponse,
    insert: () => notConfiguredResponse,
    update: () => notConfiguredResponse,
    delete: () => notConfiguredResponse,
    eq: () => chain,
    single: () => notConfiguredResponse,
    order: () => chain,
    limit: () => chain,
  };

  const stub: any = {
    auth: {
      getSession: () => Promise.resolve({ data: { session: null }, error: { message } } as any),
      signInWithPassword: () => notConfiguredResponse,
      signUp: () => notConfiguredResponse,
      signOut: () => Promise.resolve({ error: { message } } as any),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } }, error: null } as any),
    },
    from: () => chain,
    functions: {
      invoke: () => notConfiguredResponse,
    },
    storage: {
      from: () => ({
        upload: () => notConfiguredResponse,
        download: () => notConfiguredResponse,
        list: () => notConfiguredResponse,
      }),
    },
  };

  return stub as SupabaseClient;
}

export const supabase: SupabaseClient =
  isSupabaseConfigured
    ? createClient(RESOLVED_URL!, RESOLVED_KEY!)
    : createMissingEnvStub();